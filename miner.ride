{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let AINTID = fromBase58String("4PVEMfdqhwzpLAQjqgQ1Sys9agqBxtP8QEnAthSrLPfF")
let SEP = "__"

@Callable(i)
func lockAint(node: String) = {
    let lockKey = "%s" + SEP + if (node == "mobile") then toString(i.caller) else node
    let pmt = i.payments[0]
    let pmtAssetId = pmt.assetId.value()

    if (i.payments.size() != 1) then throw("exact 1 payment must be attached") else
    if (pmtAssetId != AINTID) then throw("only AINT can be used in payment") else

    let val = getString(lockKey).valueOrElse("")
    let alreadyLocked = parseIntValue(split(val, SEP)[1]).valueOrElse(0)
    let amount = alreadyLocked + i.payments[0].amount
    let newVal = "%d%s" + SEP + toString(amount) + SEP + toString(i.caller)

    [
        StringEntry(lockKey, newVal)
    ]
}

@Callable(i)
func unlockAint(node: String, amount: Int) = {
    let lockKey = "%s" + SEP + if (node == "mobile") then toString(i.caller) else node
    let val = getString(lockKey).valueOrElse("")
    let alreadyLocked = parseIntValue(split(val, SEP)[1]).valueOrElse(0)
    let newVal = "%d%s" + SEP + toString(alreadyLocked - amount) + SEP + toString(i.caller)

    if (amount > alreadyLocked) then throw("amount is too big") else

    [
        StringEntry(lockKey, newVal),
        ScriptTransfer(i.caller, amount,  AINTID)
    ]
}
{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEP = "__"
let AINTIDSTR = "WAVES"
let AINTID    = fromBase58String(AINTIDSTR)
let MULT8 = 1_0000_0000
let MULT6 = 1_000_000
let ANOTEID = fromBase58String("9tZso8WvrB2YR5SA7RyCnsLcKjTZBGtQq49Js8cczeyb")

func keyBeneficiaryAddress() = "%s__beneficiaryAddress"
func keyPrice() = "%s__price"
func keyPriceAnote() = "%s__priceAnote"
func keyTier() = "%s__tier"

let PRICESTEP = MULT8 / 10

@Callable(i)
func bid() = {
    let adKey = "%s__" + toString(i.caller)
    let pmt = i.payments[0]
    let pmtAssetId = pmt.assetId.valueOrElse(AINTID)
    if (i.payments.size() != 1) then throw("exact 1 payment must be attached") else
    if (pmtAssetId != AINTID) then throw("only Anotes can be used in payment") else
    if (i.payments[0].amount < MULT8) then throw("minimum bid is 1 ANOTE") else
    let alreadyPaid = getInteger(adKey).valueOrElse(0)
    let amount = alreadyPaid + i.payments[0].amount
    [IntegerEntry(adKey, amount)]
}

@Callable(i)
func mintAnote() = {
    let pmt = i.payments[0]
    let pmtAssetId = pmt.assetId.valueOrElse(AINTID)
    let amount = pmt.amount

    if (i.payments.size() != 1) then throw("exact 1 payment must be attached") else
    if (pmtAssetId != AINTID) then throw("only AINT can be used in payment") else

    let price = getIntegerValue(keyPrice())
    let tier = getIntegerValue(keyTier())
    let addressBeneficiary = getStringValue(keyBeneficiaryAddress()).addressFromStringValue()
    let amountAnote = fraction(amount, MULT8, price, CEILING)

    let amountAnoteFinal = if (tier > amountAnote) then amountAnote else tier
    let tierNew = if (tier > amountAnote) then tier - amountAnote else MULT8 * 10
    let priceNew = if (tier > amountAnote) then price else price + PRICESTEP
    # let amountBeneficirary = if (tier >= amountAnote) then amount else amount - fraction(amountAnoteFinal, price, MULT8, FLOOR)
    # let returnAmount = if (tier >= amountAnote) then 0 else amount - amountBeneficirary

    # let st = ScriptTransfer(i.caller, amountAnoteFinal, ANOTEID)

    let preExecute = [
        ScriptTransfer(i.caller, amountAnoteFinal, ANOTEID),
        # ScriptTransfer(addressBeneficiary, amountBeneficirary, unit),
        IntegerEntry(keyTier(), tierNew)
    ]

    let execute = if (tier > amountAnote) then preExecute else
        preExecute ++ [
            IntegerEntry(keyPrice(), priceNew)
            # ScriptTransfer(i.caller, returnAmount, unit)
        ]

    execute
}
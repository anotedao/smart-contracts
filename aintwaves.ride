{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let AINTID = fromBase58String("BvuzJNB6qUrvEmzGt1PMBZ1QCnBNn2L7ezXHhgQKMxr7")
# let AINTID = fromBase58String("66DUhUoJaoZcstkKpcoN3FUcqjB6v8VJd5ZQd6RsPxhv")
let WAVESIDSTR = "WAVES"
let WAVESID    = fromBase58String(WAVESIDSTR)
let MULT8 = 1_0000_0000
let PRICESTEP = MULT8 / 100
let SEP = "__"

func keyBeneficiaryAddress() = "%s__beneficiaryAddress"
func keyPrice() = "%s__price"
func keyTier() = "%s__tier"

@Callable(i)
func constructor(beneficiaryAddressStr58: String) = {
    if (this != i.caller) then throw("permissions denied") else
  
    let beneficiaryAddress = beneficiaryAddressStr58.addressFromStringValue()
    let price = MULT8
    let tier = MULT8 * 100

    [
        StringEntry(keyBeneficiaryAddress(), beneficiaryAddress.toString()),
        IntegerEntry(keyTier(), tier),
        IntegerEntry(keyPrice(), price)
    ]
}

@Callable(i)
func deposit(hash: String) = {
    let pmt = i.payments[0]
    let pmtAssetId = pmt.assetId.valueOrElse(WAVESID)
    let amount = pmt.amount

    if (i.payments.size() != 1) then throw("exact 1 payment must be attached") else
    if (pmtAssetId != WAVESID) then throw("only WAVES can be used in payment") else

    let key = "%s__" + toString(i.caller)
    let val = "%s%s__" + hash + SEP + height.toString() + SEP + toString(amount)

    [
        StringEntry(key, val)
    ]
}

@Callable(i)
func refund(secret: String) = {
    let key = "%s__" + toString(i.caller)
    let val = getStringValue(key)
    let hash = val.split(SEP)[1]
    let h = parseBigIntValue(val.split(SEP)[2]).toInt()
    let amount = parseIntValue(val.split(SEP)[3])
    
    if keccak256(blake2b256(secret.toBytes())).toBase58String() != hash then throw("secret is wrong") else
    if height - h < 60 then throw("too early to refund") else

    [
        DeleteEntry(key),
        ScriptTransfer(i.caller, amount, WAVESID)
    ]
}

@Callable(i)
func mint() = {
    let pmt = i.payments[0]
    let pmtAssetId = pmt.assetId.valueOrElse(WAVESID)
    let amount = pmt.amount

    if (i.payments.size() != 1) then throw("exact 1 payment must be attached") else
    if (pmtAssetId != WAVESID) then throw("only ANOTE can be used in payment") else

    let price = getIntegerValue(keyPrice())
    let tier = getIntegerValue(keyTier())
    let addressBeneficiary = getStringValue(keyBeneficiaryAddress()).addressFromStringValue()
    let amountAint = fraction(amount, MULT8, price, CEILING)

    let amountAintFinal = if (tier > amountAint) then amountAint else tier
    let tierNew = if (tier > amountAint) then tier - amountAint else MULT8 * 100
    let priceNew = if (tier > amountAint) then price else price + PRICESTEP
    let amountBeneficirary = if (tier >= amountAint) then amount else amount - fraction(amountAintFinal, price, MULT8, FLOOR)
    let returnAmount = if (tier >= amountAint) then 0 else amount - amountBeneficirary

    let st = ScriptTransfer(i.caller, amountAintFinal, AINTID)

    let preExecute = [
        ScriptTransfer(i.caller, amountAintFinal, AINTID),
        ScriptTransfer(addressBeneficiary, amountBeneficirary, unit),
        IntegerEntry(keyTier(), tierNew)
    ]

    let execute = if (tier > amountAint) then preExecute else
        preExecute ++ [
            IntegerEntry(keyPrice(), priceNew),
            ScriptTransfer(i.caller, returnAmount, unit)
        ]

    execute
}

# @Callable(i)
# func test() = {
#     [
#         IntegerEntry(keyTier(), PRICESTEP * 10)
#     ]
# }
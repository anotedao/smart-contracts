{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let WAVESIDSTR = "WAVES"
let WAVESID    = fromBase58String(WAVESIDSTR)
let MULT8 = 1_0000_0000
let SEP = "__"

func keyBeneficiaryAddress() = "%s__beneficiaryAddress"

func keyPrice() = "%s__price"

@Callable(i)
func constructor(beneficiaryAddressStr58: String) = {
    if (this != i.caller) then throw("permissions denied") else
  
    let beneficiaryAddress = beneficiaryAddressStr58.addressFromStringValue()
    let price = getInteger(keyPrice()).valueOrElse(MULT8)

    [
        StringEntry(keyBeneficiaryAddress(), beneficiaryAddress.toString()),
        IntegerEntry(keyPrice(), price)
    ]
}

@Callable(i)
func deposit(hash: String) = {
    let pmt = i.payments[0]
    let pmtAssetId = pmt.assetId.valueOrElse(WAVESID)
    let amount = pmt.amount

    if (i.payments.size() != 1) then throw("exact 1 payment must be attached") else
    if (pmtAssetId != WAVESID) then throw("only WAVES can be used in payment") else

    let key = "%s__" + toString(i.caller)
    let val = "%s%s__" + hash + SEP + height.toString() + SEP + toString(amount)

    [
        StringEntry(key, val)
    ]
}

@Callable(i)
func refund(secret: String) = {
    let key = "%s__" + toString(i.caller)
    let val = getStringValue(key)
    let hash = val.split(SEP)[1]
    let h = parseBigIntValue(val.split(SEP)[2]).toInt()
    let amount = parseIntValue(val.split(SEP)[3])
    
    if keccak256(blake2b256(secret.toBytes())).toBase58String() != hash then throw("secret is wrong") else
    if height - h < 60 then throw("too early to refund") else

    [
        DeleteEntry(key),
        ScriptTransfer(i.caller, amount, WAVESID)
    ]
}